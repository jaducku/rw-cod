// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  replies       Reply[]
  poll          Poll[]
  votes         Vote[]
  userCode Int?
  nickName String?
  swordManTier Int?
  swordManQty Int?
  ballistaTier Int?
  ballistaQty Int?
  knightTier Int?
  knightQty Int?
  vestalTier Int?
  vestalQty Int?
  specialTier Int?
  specialQty Int?
  merits Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id String @id @default(uuid())
  title String
  content String
  cretedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation(fields: [authorId], references: [id])
  authorId String
  replies Reply[]
}

model Reply {
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id])
  postId String
  author User @relation(fields: [authorId], references: [id])
  authorId String
}

model Poll {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  expiredAt DateTime
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  options Option[]
}

model Option{
  id String @id @default(uuid())
  item String
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String
  votes Vote[]
}

model Vote {
  id String @id @default(uuid())
  voter User @relation(fields: [voterId], references: [id])
  voterId String
  option Option @relation(fields: [optionId], references: [id])
  optionId String
}